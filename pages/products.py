import streamlit as st
from database import get_conn
from utils.helpers import safe_int, safe_float

# üîí Cache danh m·ª•c
@st.cache_data(ttl=300)
def get_categories():
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("""
        SELECT DISTINCT category 
        FROM products 
        WHERE category IS NOT NULL 
        ORDER BY category
    """)
    categories = [row[0] for row in cur.fetchall()]
    conn.close()
    return categories

# üîí Cache s·∫£n ph·∫©m theo ƒëi·ªÅu ki·ªán
@st.cache_data(ttl=60)
def get_products(search, selected, page_number, page_size):
    conn = get_conn()
    cur = conn.cursor()

    sql = "SELECT id, name, price, stock FROM products WHERE 1=1"
    params = []

    if search:
        sql += " AND name LIKE ?"
        params.append(f"%{search}%")

    if selected != "T·∫•t c·∫£":
        sql += " AND category = ?"
        params.append(selected)

    sql += " ORDER BY name LIMIT ? OFFSET ?"
    offset = (page_number - 1) * page_size
    params.extend([page_size, offset])

    cur.execute(sql, params)
    rows = cur.fetchall()
    conn.close()
    return rows

# üõ†Ô∏è C·∫≠p nh·∫≠t s·∫£n ph·∫©m
def update_product(id, name, price, stock):
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("""
        UPDATE products
        SET name = ?, price = ?, stock = ?
        WHERE id = ?
    """, (name, price, stock, id))
    conn.commit()
    conn.close()

# üóëÔ∏è X√≥a s·∫£n ph·∫©m
def delete_product(id):
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("DELETE FROM products WHERE id = ?", (id,))
    conn.commit()
    conn.close()

# üß© Trang ch√≠nh
def product_page():
    st.header("üì¶ Danh s√°ch s·∫£n ph·∫©m")

    # 1. T√¨m ki·∫øm
    search = st.text_input("üîç T√¨m ki·∫øm s·∫£n ph·∫©m", "")

    # 2. Ch·ªçn danh m·ª•c
    categories = get_categories()
    options = ["T·∫•t c·∫£"] + categories
    selected = st.selectbox("üìÇ Ch·ªçn danh m·ª•c", options)

    # 3. Ph√¢n trang
    PAGE_SIZE = 20
    if "page_number" not in st.session_state:
        st.session_state.page_number = 1

    # 4. Truy v·∫•n s·∫£n ph·∫©m
    rows = get_products(search, selected, st.session_state.page_number, PAGE_SIZE)

    if not rows:
        st.info("Kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p.")
        return

    # 5. Hi·ªÉn th·ªã s·∫£n ph·∫©m
    st.subheader(f"üìÑ Trang {st.session_state.page_number}")
    for pid, name, raw_price, raw_stock in rows:
        t·ªìn_kho = safe_int(raw_stock)
        with st.expander(f"{name} - üì¶ T·ªìn kho: {t·ªìn_kho} "):
            new_name  = st.text_input("T√™n s·∫£n ph·∫©m", value=name, key=f"name_{pid}")
            new_price = st.number_input("Gi√° (‚Ç´)", value=safe_float(raw_price), key=f"price_{pid}")
            new_stock = st.number_input("T·ªìn kho", value=t·ªìn_kho, key=f"stock_{pid}")

            col1, col2 = st.columns(2)
            with col1:
                if st.button("üíæ L∆∞u thay ƒë·ªïi", key=f"save_{pid}"):
                    update_product(pid, new_name, new_price, new_stock)
                    st.success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m.")
                    st.rerun()
            with col2:
                confirm = st.checkbox("T√¥i x√°c nh·∫≠n mu·ªën x√≥a", key=f"confirm_{pid}")
                if st.button("üóëÔ∏è X√≥a s·∫£n ph·∫©m", key=f"delete_{pid}"):
                    if confirm:
                        delete_product(pid)
                        st.warning("üóëÔ∏è ƒê√£ x√≥a s·∫£n ph·∫©m.")
                        st.rerun()
                    else:
                        st.error("‚ùó Vui l√≤ng x√°c nh·∫≠n tr∆∞·ªõc khi x√≥a.")

    # 6. ƒêi·ªÅu h∆∞·ªõng ph√¢n trang
    col1, col2, col3 = st.columns([1, 2, 1])
    with col1:
        if st.session_state.page_number > 1:
            if st.button("‚¨ÖÔ∏è Trang tr∆∞·ªõc"):
                st.session_state.page_number -= 1
                st.rerun()
    with col3:
        if len(rows) == PAGE_SIZE:
            if st.button("‚û°Ô∏è Trang ti·∫øp theo"):
                st.session_state.page_number += 1
                st.rerun()